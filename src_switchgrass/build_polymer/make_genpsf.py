#---------------------------------------------------------------------------
# Supporting scripts for making a general psf/pdb file
# Switchgrass variety: Alamo switchgrass

# 'None' is a keyword reserved - DONT USE IT for PDB/PSF filenames.

# H:G:S = 26:42:32 (A); G:S = 0.75 - 0.78, H = 2 (B)
# pCA:FA = 1 (A); pCA:FA = 6:32 (B)

# Import modules

import os
import sys
import numpy
import re
import shutil
import glob
import random
import collections
import math

# General copy script
def gencpy(dum_maindir,dum_destdir,fylname):

    srcfyl = dum_maindir + '/' + fylname

    if not os.path.exists(srcfyl):
        print('ERROR: ', srcfyl, 'not found')
        return

    desfyl = dum_destdir + '/' + fylname
    shutil.copy2(srcfyl,desfyl)
#---------------------------------------------------------------------
# Set defaults
def def_vals():
    return -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.0
#---------------------------------------------------------------------

# Check all flags 
def check_all_flags(casenum,fpdbflag,ftopflag,fresflag,fpatflag,\
                    fl_constraint,fpresctr,fppctr,opt,ffflag,fnamd,\
                    disflag,M,N):
    outflag = 1
    if casenum == -1:
        print('ERR: Case number not input'); outflag = -1
    elif N == 0:
        print('ERR: No chains found in input'); outflag = -1
    elif disflag == 0 and M == 0:
        print('ERR: Monodisperse systems with no MW'); outflag = -1
    elif fpdbflag == 0 or ftopflag == 0:
        print('ERR: PDB/Topology file not entered'); outflag = -1
    elif ffflag == 0:
        print('ERR: Force field type not set: A,B, None');outflag = -1
    elif fresflag == 0 and (opt == 'none' or opt=='None'):
        print('ERR: Residue file/option input not entered'); outflag = -1
    elif fpatflag == 0 and (opt == 'none' or opt=='None'):
        print('ERR: Patch file/option not entered'); outflag = -1
    elif fl_constraint == 1:
        if fpresctr == 0 or fppctr == 0:
            print('ERR: Constraint files not given: constraint flag ON')
            outflag = -1
    elif fnamd == 0:
        print('WARNING: No NAMD file found')

    return outflag
#---------------------------------------------------------------------

# Define headers for psf files
def psfgen_headers(fin,topname,outname):
    fin.write(';# headers and inputs \n')
    fin.write('package require psfgen \n')
    topinp = '../' + topname
    fin.write('%s\t %s\n' %('topology',topinp))
    fin.write('%s\t %s\n' %('set outputname', outname))
#---------------------------------------------------------------------              
# Details for closing input files
def psfgen_postprocess(fin,basic_pdb,writetype,iter_num,segname):
    # outname is already there. no need again
    fin.write(';# Writing output \n')
    fin.write('regenerate angles dihedrals \n')
    if writetype == 'single':
        comnt = 'dimer pdb for reference'
        fin.write('coordpdb %s  ;# %s\n' %(basic_pdb,comnt))
        comnt2 = 'Guesses rest of the coordinates from PDB inp'
    elif writetype == 'multi':
        if iter_num == 1:
            comnt = 'Different in first iteration'
            pdbfyle =  '../' + basic_pdb
        else:
            comnt = '*.coor is the file generated by NAMD'
            pdbfyle = '$outputname.coor'
        fin.write('coordpdb %s  %s  ;#  %s\n' %(pdbfyle,segname,comnt))
        comnt2 = 'Can create steric clashes and hence the iterations.'
    else:
        exit('ERROR: Unknown option: ' + writetype)
        
    fin.write('guesscoord ;#  %s\n' %(comnt2))
    fin.write('writepdb $outputname.pdb \n')
    fin.write('writepdb ${outputname}_${count}.pdb \n')#backup
    fin.write('writepsf $outputname.psf \n')
    fin.write('writepdb ${outputname}_${count}.psf \n')
#---------------------------------------------------------------------

# Define monomer ratios from literature    
def residue_ratios(opt='none',inpfyle='none'):
# add monomer details
    frac_res = collections.OrderedDict()
    
    if opt == 'None' or opt == 'none':
        with open(inpfyle) as fyle_dict:
            for line in fyle_dict:
                line = line.strip()
                (key, val) = line.split()
                frac_res[key] = float(val)

    elif opt == 'A' or opt == 'a':
        # H:G:S = 26:42:32 (B); pCA:FA = 1
        frac_res['PHP'] = 26/140 # % PHP (H) monomers
        frac_res['GUA'] = 42/140 # % GUA (G) monomers
        frac_res['SYR'] = 32/140 # % SYR (S) monomers
        frac_res['PCA'] = 20/140 # % PCA monomers
        frac_res['FERU'] = 20/140 # % FA monomers
        
    elif opt == 'B' or opt == 'b':
        # G:S = 0.78, H = 2 (A); pCA:FA = 6:32
        gmonrat = 0.27

    return frac_res
#---------------------------------------------------------------------

# Define patch ratios from literature
def patch_ratios(opt_graft,resdict,opt='none',inpfyle='none'):

# add patch details
    frac_patch = collections.OrderedDict()

    if opt == 'None' or opt == 'none':
        with open(inpfyle) as fyle_dict:
            for line in fyle_dict:
                line = line.strip()
                (key, val) = line.split()
                frac_patch[key] = float(val)

    elif opt == 'A' or opt == 'a':
        frac_patch['BO4R'] = 0.2
        frac_patch['BO4L'] = 0.2
        frac_patch['55']  = 0.2
        frac_patch['405'] = 0.2
        frac_patch['BB']  = 0.2

    elif opt == 'B' or opt == 'b':
        frac_patch['BO4'] = 0

    # check for grafts and rearrange dictionary
    if opt_graft[0] != 1:
        return frac_patch

    elif opt_graft[0] == 1:
        newfrac_patch = collections.OrderedDict() #create new dict
        grcnt = 1
        while grcnt < len(opt_graft):
            gr_resname = opt_graft[grcnt]
            gr_patname = opt_graft[grcnt+1]
            resflag = 0; graft_prob = 0
            for rescnt in range(len(resdict)):
                if list(resdict.keys())[rescnt] == gr_resname:
                    resflag = 1
                    graft_prob += list(resdict.values())[rescnt]
                    frac_patch[gr_patname] = graft_prob
                    newfrac_patch[gr_patname] = graft_prob
                    
            grcnt = grcnt + 2 
            if resflag == 0:
                print('ERROR: Could not find ', str(gr_resname))
                return 0

        # Renormalize if grafts are present and create new dict
        sumprob = 0
        for patcnt in range(len(frac_patch)):
            if list(frac_patch.keys())[patcnt] not in opt_graft:
                sumprob += list(frac_patch.values())[patcnt]

        normval = sumprob/(1-graft_prob)

        for patcnt in range(len(frac_patch)):
            if list(frac_patch.keys())[patcnt] not in opt_graft:
                newprob = list(frac_patch.values())[patcnt]/normval
                keyval = list(frac_patch.keys())[patcnt]
                newfrac_patch[keyval] = newprob
        return newfrac_patch

    else:
        print('Unknown option', graft_opt[0])
        return 0

#---------------------------------------------------------------------

# Assign MW for polydisperse cases
def make_polydisp_resids(inpfyle, nch):
    chflag = 0
    with open(inpfyle) as fyle_pdi:
        for line in fyle_pdi:
            line = line.strip()
            if chflag == 0:
                if len(line) != 2 or line[0] != 'num_chains':
                    print('Unknown first line in: ', inpfyle, line)
                    return -1
                numch = int(line[1])
                if numch != nch:
                    print('ERR: Mismatch in number of chains')
                    return -1
                chflag = 1
                resmw_data = []
            else:
                resmw_data.append(int(line[0]))

    num_avg_mw = 0; wt_avg_mw = 0
    for mws in range(len(resmw_data)):
        num_avg_mw += resmw_data[mws]
        wt_avg_mw  += pow(resmw_data[mws],2)
    
    wt_avg_mw  = wt_avg_mw/num_avg_mw
    num_avg_mw = num_avg_mw/nch
    pdiout = wt_avg_mw/num_avg_mw

    return resmw_data, pdiout
#---------------------------------------------------------------------

# Initiate log file
def init_logwrite(flog,casenum,bmtype,Marr,optv,tfile,pfile,segname,nch\
                  ,att,tol,opstyle,fl_constraint,resfyle,patfyle,\
                  disflag,pdiinp):
    flog.write('Case number: %d\n' %(casenum))
    flog.write('Creating NAMD file for %s\n' %(bmtype))
    if optv == 'A' or optv == 'a':
        flog.write('Ref: Yan et al., Biomass & Bioener 34, 48-53, 2010\n')
    elif optv == 'B' or optv == 'b':
        flog.write('Ref: Samuel et al., Front. Ener. Res., 1 (14) 2014\n')

    if disflag == 0:
        flog.write('Monodisperse system \n')
        flog.write('Num Chains/num Residues: %d\t%d\n'%(nch,Marr[0]))
    else:
        flog.write('Polydisperse system \n')
        for i in len(Marr):
            flog.write('Chain#/Num Residues: %d\t%d\n' %(i+1,Marr[i]))

    flog.write('PDI: %\g\n' %(pdiinp))
    flog.write('Tot res/pat: %d\t%d\n' %(sum(Marr),sum(Marr)-len(Marr)))
    flog.write('Res/patch inps: %s\t%s\n' %(resfyle,patfyle))
    flog.write('Input Topol file/PDB file: %s\t%s\n' %(tfile,pfile))
    flog.write('Segment name: %s\n' %(segname))
    flog.write('#attempts/Tolerance: %d\t%g\n' %(att,tol))
    flog.write('Constraint flag: %d\n' %(fl_constraint))
    flog.write('Output style: %s\n' %(opstyle))
    
    flog.write('Analysis beginning ..\n')
#---------------------------------------------------------------------

# Create cumulative probability distribution from a dictionary
def cumul_probdist(inpdict,flog):

    dummy_distarr = []

    # store first value
    val = list(inpdict.values())[0]
    dummy_distarr.append(val)

    # add rest of the values
    for key in range(len(inpdict)-1):#iterate until n-1 elements
        val = dummy_distarr[key] + list(inpdict.values())[key+1]
        dummy_distarr.append(val)

    # check normalization
    if abs(dummy_distarr[len(dummy_distarr)-1]-1) > pow(10,-5):
        print('Warning: data not normalized (', \
              dummy_distarr[len(dummy_distarr)-1],\
              '). Forcing normalization')
        flog.write('%s\t%g\t%s\n' %('Warning: data not normalized (', \
                                    dummy_distarr[len(dummy_distarr)-1],\
                                    '). Forcing normalization'))
        sumval = dummy_distarr[len(dummy_distarr)-1]
        
        # force normalization
        for cnt in range(len(dummy_distarr)):
            dummy_distarr[cnt] = dummy_distarr[cnt]/sumval
            
        print('New distribution: ', dummy_distarr)
            
    else:
        print('Generated target cumulative distribution..')

    return dummy_distarr
#---------------------------------------------------------------------

# Check whether the input pdb file is consistent with the inputs given
# for generating the tcl file
def check_pdb_defaults(inpfyle,defa_res,seginp):
    flag = 1 # default true
    resnum = 1
    # Check whether pdb file contains default segment and segment name
    with open(inpfyle) as fpdbin:
        for line in fpdbin:
            line = line.rstrip('\n')
            all_words = re.split('\W+',line)
            if all_words[0] == 'ATOM':
                lenwords = len(all_words)
                if all_words[lenwords-1] != seginp and \
                   all_words[lenwords-2] != seginp:
                    print(all_words[lenwords-1],all_words[lenwords-2])
                    print('Did not find ',seginp,'in ',line)
                    flag = -1
                    break
                if defa_res not in all_words:
                    print('Did not find ',defa_res,'in ',line)
                    flag = -1
                    break
                if all_words[4].isdigit():
                    if int(all_words[4]) > resnum:
                        print('WARNING: More than one res found: ',\
                              resnum)
                        resnum = int(all_words[4])
                else:
                    print('ERR: Unknown value for chain num',\
                          all_words[4])
                    flag = -1


    return flag
#---------------------------------------------------------------------
    
# Create entire list in one go so that cumulative distribution holds true
def create_segments(flist,nresarr,nch,segname,inp_dict,cumulprobarr\
                    ,tol,maxattmpt,flog,graftopt,defa_res):

    # Write list to a separate file
    flist.write(';#  Entire segment list\n')
    for i in range(nch):
        flist.write(';#  num_resds\t%d, chain#\t%d\n' \
                    %(nresarr[i],i+1))

    sum_of_res = sum(nresarr)
    flist.write('; Total number of residues\t%d\n' %(sum_of_res))
    flog.write('Probabilities for each attempt\n')
    flog.write('Attempt#\t')
    if defa_res not in list(inp_dict.keys()):
        print('FATAL ERR: default residue not in the input')
        print(defa_res, list(inp_dict.keys()))
        return -1

    for wout in range(len(inp_dict)):
        flog.write('%s (%g)\t' %(list(inp_dict.keys())[wout],\
                                 list(inp_dict.values())[wout]))

    flog.write('L2norm \n')

    flag_optimal = -1

    for attnum in range(maxattmpt):

        flog.write('%d\t' %(attnum+1))    
        flist.write(';# Attempt number \t%d\n' %(attnum+1))
        flist.write(' resetpsf\n')

        out_list = [[] for i in range(nch)] #reset every attempt
   
        for chcnt in range(nch):
            flist.write(';# chain number:\t%d\n' %(chcnt+1))
            flist.write(' segment %s {\n' %(segname))
            # first is default residue
            flist.write(' residue\t%d\t%s\n' %(1,defa_res))
            out_list[chcnt].append(defa_res)
            rescnt = 1
            deg_poly_chain = nresarr[chcnt]

            while rescnt < deg_poly_chain:

                ranval = random.random() #seed is current system time by default
                findflag = 0
                consecresflag = 0 #default: consecutive res are NOT found

                for arrcnt in range(len(cumulprobarr)):
        
                    #Only need to check the less than value because
                    #the array is organized in increasing order.
                    #Break the loop once the first point where the
                    #condition is met.

                    if ranval < cumulprobarr[arrcnt]:
                
                        findflag = 1   
                        resname1 = list(inp_dict.keys())[arrcnt]
                        resname2 = out_list[chcnt][rescnt-1]
                        consecresflag = is_res_cons(resname1,resname2\
                                                        ,graftopt)
                        if consecresflag == 0:
                            flist.write(' residue\t%d\t%s\n' \
                                        %(rescnt+1,resname1))
                            out_list[chcnt].append(resname1)
                            rescnt = rescnt + 1
                            
                        break

                if findflag != 1:
                    print('Random value/Probarr:', ranval,cumulprobarr)
                    exit('Error in finding a random residue\n')
            
            flist.write(' }')

        # After going through all the chains, count occurence of each res/patch
        outdist = []
        for key in inp_dict:
            outdist.append(sum([i.count(key) for i in out_list]))

        #normalize
        sumval = sum(outdist)
        if sumval != sum_of_res:
            print('Sum from distn,sum_of_res:',sumval,sum_of_res)
            exit('ERROR: Sum not equal to the total # of residues')
        normlist = [x/sumval for x in outdist]

        #extract target probabilities and compare
        targ_probs = list(inp_dict.values())
        normval = numpy.linalg.norm(numpy.array(normlist) \
                                    - numpy.array(targ_probs))
    
        if normval <= tol:
            #write to log file
            for wout in range(len(outdist)):
                flog.write('%g\t' %(outdist[wout]))
            flog.write('%g\n' %(normval))
            flog.write('Found optimal residue configuration\n')
            print('Found optimal residue configuration..')
            flag_optimal = 1
            break
        else:
            flist.write('\n')
            for wout in range(len(outdist)):
                flog.write('%g\t' %(outdist[wout]))
            flog.write('%g\n' %(normval))


    if flag_optimal == -1:
        print('Did not find optimal residue configuration')
        print('Using last residue configuration with L2norm: ', normval)
        flog.write('Did not find optimal residue configuration\n')
        flog.write('Using last configuration with residue L2norm: %g'\
                   %(normval))

    return out_list
#---------------------------------------------------------------------

# Read and check patch constraints -- May not be effective as opposed
# to reading at once and copying to array. Need to think about it.
# Check special cases using files
# THIS IS CONSTRAINT FOR RESIDUE1-PATCH-RESIDUE2 combination
def check_constraints(inpfyle,patchname,resname1,resname2):
    
    bef_flag = 1; aft_flag = 1 # keep as true
    with open(inpfyle,'r') as fctr: 
        for line in fctr:
            line = line.rstrip('\n')
            all_words = re.split('\W+',line)
            if len(all_words) != 3:
                print('ERR: Constraint file does not have 3 entries')
                print(len(all_words),all_words)
                return -2 # return -2
            if all_words[0] == patchname:
                if all_words[1] == resname1:
                    bef_flag = 0
                elif all_words[2] == resname2:
                    aft_flag = 0


    # Return 0 if any flags are 0, else return 1
    if bef_flag == 0 or aft_flag == 0:
        return 0
    else:
        return 1
#---------------------------------------------------------------------

# check consecutive residues - cannot have graft residue in
# consecutive positions
def is_res_cons(resname1,resname2,graftopt):
    sameflag = 0
    if graftopt[0] == 1:
        if (resname1 in graftopt) and (resname2 in graftopt):
            sameflag = 1
    return sameflag
#---------------------------------------------------------------------

# read all patch incompatibilities
def read_patch_incomp(fname):
    with open(fname,'r') as fin:
        result = [[sval for sval in line.split()] for line in fin]
    return result
#---------------------------------------------------------------------

# check forbidden consecutive patches
# THIS IS FOR RES1-PATCH1-RES2-PATCH2 combination
# Only patch1 and patch2 are important. rest is checked in
# check_constraints: patname1 - leftpatch, patname2 - rightpatch
def is_forbid_patch(patchname1,patchname2,patforbid):
    flag = 0 # default not forbidden
    for i in range(len(patforbid)):
        if patforbid[i][0] == patchname1:
            if any(patchname2 in st for st in patforbid[i]):
                flag = 1
        
    return flag
#---------------------------------------------------------------------

# Generate patch rules: patch - m, residues - n
# Rule 1: (a)patch "m" between resids n/n+1; check is_forbid_pat(m,m-1)
# (b) check constraints for m between n/n+1
# Rule 2: res_n = graft; (a) graft_patch m between n/(n+1); check
# is_forbid_pat(m-1,m+1). 
# Rule 3: if res_n+1 = graft, patch m between n/n+2; check
# is_forbid_pat(m, m-1) => same as rule 1 (VERY IMP); check constrants
# between n and n+2: VERY IMP
# Rule 4: if last resiudue is a graft. graft_patch m between n/n-1; no
# checks required

def create_patches(flist,nresarr,nch,segname,inp_dict,cumulprobarr\
                   ,tol,maxattmpt,flog,ctr_flag,pres_fyle,residlist,\
                   patforbid,graft_opt):

    # Write list to a separate file
    flist.write(';# Entire patch list\n')
    for i in range(nch):
        flist.write(';#  num_patches\t%d, chain#\t%d\n' \
                    %(nresarr[i]-1,i+1))

    sum_of_res = sum(nresarr)
    sum_of_pat = sum_of_res - nch
    flist.write('; Total number of patches\t%d\n' %(sum_of_pat))

    flog.write('Probabilities for each attempt\n')
    flog.write('Attempt#\t')
    
    for wout in range(len(inp_dict)):
        flog.write('%s (%g)\t' %(list(inp_dict.keys())[wout],\
                                 list(inp_dict.values())[wout]))
    flog.write('L2norm \n')
    flag_optimal = -1

    for attnum in range(maxattmpt):
        flog.write('%d\t' %(attnum+1))    
        flist.write(';# Attempt number \t%d\n' %(attnum+1))
        out_list = [[] for i in range(nch)] #reset every attempt

        for chcnt in range(nch):

            flist.write(';# chain number:\t%d\n' %(chcnt+1))
            flist.write(';# -- Begin patches for %s ---\n' %(segname))

            patcnt = 0
            branched = 0
            patname_L = 'None'
            deg_poly_chain = nresarr[chcnt]

            # aflag: for checking res-pat-res constraints
            # cflag: for checking pat1-pat2 adjancency
            # Need to check both the monomers a patch connects
            # patch_n between res_n and res_n+1
            while patcnt <= deg_poly_chain-2: #for checking constraints
                resname1 = residlist[chcnt][patcnt]
                resname2 = residlist[chcnt][patcnt+1]

                # Normal case: resname1 and resname2 are "normal" RES
                if (resname1 not in graft_opt) and (resname2 not in\
                   graft_opt):
                    patchname,aflag,cflag = write_normal_patch(cumulprobarr,\
                                                               inp_dict,\
                                                               resname1,\
                                                               resname2,\
                                                               ctr_flag,\
                                                               patcnt,\
                                                               pres_fyle,\
                                                               patforbid,\
                                                               graft_opt,\
                                                               out_list,\
                                                               chcnt,\
                                                               patname_L)

                    if patchname == 'ERR':
                        return -1 

                    # Update list if conditions are met
                    if aflag == 1 and cflag == 0: 
                        out_list[chcnt].append(patchname)
                        flist.write(' patch\t%d\t%s\t%s:%d\t%s:%d\n' \
                                    %(patcnt+1,patchname,\
                                      segname,patcnt+1,segname,patcnt+2))
                        patname_L = patchname # update left "normal" patch
                        patcnt += 1 # update counter

                    elif aflag == -2: #pres_fyle format is wrong
                        return 

                    #end update aflag/cflag

                    continue # continue to while loop
                        
                # Special Case 1: "left RES" of the patch is a graft
                # monomer. Graft patch between left side (res_n) and
                # right side (res_n+1). Patches are assigned to the
                # next residue. But rule 2 written above the function
                # defintion needs to be checked. Therefore don't
                # update patchname_L. Next "normal" patch will be
                # compared alongside patchname_L
                elif resname1 in graft_opt:
                    resindex   = graft_opt.index(resname1)
                    patchname  = graft_opt[resindex+1]
                    flist.write(' patch\t%d\t%s\t%s:%d\t%s:%d\n' \
                                %(patcnt+1,patchname,\
                                  segname,patcnt+1,segname,patcnt+2))
                    out_list[chcnt].append(patchname)
                    patcnt += 1
                    continue #continue to next residue                    


                # Special Case 2: "right RES" of the patch is a graft
                # monomer. 
                elif resname2 in graft_opt:
                    # Case 2a: last RES is graft. Patch graft between
                    # n and n+1. graft_at_n is irrelevant here,
                    # because resname1 and resname2 cannot be
                    # simultaneously grafts. Again dont update
                    # patchname_L. It is irrelevant
                    if patcnt == deg_poly_chain-2: 
                        resindex  = graft_opt.index(resname2)
                        patchname = graft_opt[resindex+1]
                        flist.write(' patch\t%d\t%s\t%s:%d\t%s:%d\n' \
                                    %(patcnt+1,patchname,\
                                      segname,patcnt+1,segname,patcnt+2))
                        out_list[chcnt].append(patchname)
                        patcnt += 1
                        continue # continue to while loop/next chain

                    #Case 2b: patch normal between n and n+2. But
                    #check patch constraints with the previous
                    #"normal" patch. For ex: H-1-G-2-PCA-3-G-4-PCA-5;
                    #normal checks will be between 2,4
                    else: 
                        resname3 = residlist[chcnt][patcnt+2]
                        patchname,aflag,cflag = write_normal_patch(cumulprobarr,\
                                                                   inp_dict,\
                                                                   resname1,\
                                                                   resname3,\
                                                                   ctr_flag,\
                                                                   patcnt,\
                                                                   pres_fyle,\
                                                                   patforbid,\
                                                                   graft_opt,\
                                                                   out_list,\
                                                                   chcnt,\
                                                                   patname_L)
                        if patchname == 'ERR':
                            return -1 

                        # Update list if conditions are met
                        if aflag == 1 and cflag == 0: 
                            out_list[chcnt].append(patchname)
                            flist.write(' patch\t%d\t%s\t%s:%d\t%s:%d\n' \
                                        %(patcnt+1,patchname,\
                                          segname,patcnt+1,segname,patcnt+3))
                            patchname_L = patchname # update "normal" patch
                            patcnt += 1 # update counter


                else: # Unknown condition
                    print('ERROR in sequence')
                    print('ch#/pat#/res1/res2',chcnt+1,patcnt+1,\
                          resname1,resname2)
                    return -1

            # end while loop
            flist.write(';# --End patch list for %d--\n' %(chcnt+1))

        # end for chcnt in range(nch)

        # After going through all the chains, count occurence of each res/patch
        outdist = []
        for key in inp_dict:
            outdist.append(sum([i.count(key) for i in out_list]))

        #normalize
        sumval = sum(outdist)
        if sumval != sum_of_pat:
            print('Sum from distn,sum_of_pat array:'\
                  ,sumval,sum_of_pat)
            exit('ERROR: Sum not equal to the total # of patches')
        normlist = [x/sumval for x in outdist]

        #extract target probabilities and compare
        targ_probs = list(inp_dict.values())
        normval = numpy.linalg.norm(numpy.array(normlist) \
                                    - numpy.array(targ_probs))
    
        if normval <= tol:
            #write to log file
            for wout in range(len(outdist)):
                flog.write('%g\t' %(outdist[wout]))
            flog.write('%g\n' %(normval))
            flog.write('Found optimal patch configuration\n')
            print('Found optimal patch configuration..')
            flag_optimal = 1
            break

        else:
            flist.write('\n')
            for wout in range(len(outdist)):
                flog.write('%g\t' %(outdist[wout]))
            flog.write('%g\n' %(normval))


    if flag_optimal == -1:
        print('Did not find optimal patch configuration')
        print('Using last patch configuration with L2norm: ', normval)
        flog.write('Did not find patch optimal configuration\n')
        flog.write('Using last patch configuration with L2norm: %g'\
                   %(normval))

    return out_list
#---------------------------------------------------------------------

# Find patch for Case 1: when RES1 and RES2 are normal residues.
def write_normal_patch(cumulprobarr,pat_dict,resname1,resname2,\
                       ctr_flag,patincnt,presctrfyle,ppctrlist,\
                       graft_opt,curpat_list,chcnt,patchname_L):

    ranval = random.random() #seed is current system time by default
    findflag = 0
    arrcnt = 0

    while arrcnt <= len(cumulprobarr):
        
        #Only need to check the less than value because
        #the array is organized in increasing order.
        #Break the loop once the first point where the
        #condition is met.
        if ranval < cumulprobarr[arrcnt]:

            patchname = list(pat_dict.keys())[arrcnt]
            if patchname in graft_opt: 
                ranval = random.random() #generate new random number
                arrcnt = 0 #reset while loop
                continue # iterate until normal patch

            findflag = 1
            
            # Add constraint flags: default to TRUE
            #so that if constraints are not there, it will
            #be appended. consec flag has to be 0 for true
            appendflag = 1; consecpatflag = 0 
            if ctr_flag:
                if patincnt == 0:
                    resname_L = 'None'
                else:
                    resname_L = resname1
                        
                # end if patcnt == 0
                resname_R = resname2
                appendflag = check_constraints(presctrfyle,patchname,\
                                               resname_L,resname_R)
                consecpatflag =is_forbid_patch(patchname_L,\
                                               patchname,ppctrlist)
                # patchname cannot follow patchname_L

                # end if ctr_flag==1

            break

        else: # if ranval !< cumulprobarr[arrcnt]
            
            arrcnt += 1 # update array counter
                
        # end ranval < cumulprobarr[]

    # end while arrcnt in range(len(cumulprobarr))
        
    if findflag != 1:
        print('Random value/Probarr:', ranval,cumulprobarr)
        print('Error: Did not find a random residue\n')
        patchname = 'ERR'
    # end if find flag
    
    return patchname,appendflag,consecpatflag
#---------------------------------------------------------------------

# Write residues/patches in one go -- OBSOLTE. 
# Added in write_multi_segments
def write_segments_onego(fin,nresarr,nch,chnum,segname,res_list,\
                         patch_list,graft_opt):

    fin.write(';# ------Begin main code -----\n')
    fin.write(';# Writing % segments' %(sum(nresarr)))
    fin.write(';# Writing output for %d' %(chnum))
    fin.write(' resetpsf \n')
    fin.write(' segment %s {\n' %(segname))
    
    #Residues
    for rescnt in range(nresarr):
        fin.write('  residue  %d  %s\n' \
                  %(rescnt+1,res_list[chnum-1][rescnt]))

    fin.write('}')        
    fin.write('\n')

    #Patches
    for patcnt in range(max(nresarr)-2):
            
        resname1 = res_list[chnum-1][patcnt]
        resname2 = res_list[chnum-1][patcnt+1]
        patchname = patch_list[chnum-1][patcnt]

        # Normal Case: (see create_patches)
        if resname1 not in graft_opt and resname2 not in graft_opt:
            fin.write('patch  %s  %s:%d  %s:%d\n' \
                      %(patchname,segname,patcnt+1,segname,patcnt+2))


        # Special Case 1: (see create_patches)
        elif resname1 in graft_opt:
            fin.write('patch  %s  %s:%d  %s:%d\n' \
                          %(patchname,segname,patcnt+1,segname,patcnt+2))

        # Special Case 2: (see create_patches)
        elif resname2 in graft_opt:

            # Case 2a: last RES is graft. Patch graft between
            # n and n+1
            if patcnt == max(nresarr)-2: 
                fin.write('patch  %s  %s:%d  %s:%d\n' \
                          %(patchname,segname,patcnt+1,segname,patcnt+2))

            #Case 2b: patch normal between n and n+2
            else: 
                fin.write('patch  %s  %s:%d  %s:%d\n' \
                          %(patchname,segname,patcnt+1,segname,patcnt+3))
                    
        else: # Error
            print('Unknow res/patch sequence')
            print('ch#/patch#' , chnum, patcnt)
            print(res_list)
            print(patch_list)

 
    fin.write('\n')
#---------------------------------------------------------------------

# Write residues/patches iteration by iteration
def write_multi_segments(fin,iter_num,nresthisiter,nch,chnum,\
                         segname,res_list,patch_list,graft_opt,\
                         maxnummons):

    # Extra condition to account for the graft monomer happening at
    # the end of a PARTIAL segment. Since mth graft is attached to
    # n+1th residue (except when it is at the end of a FULL segment),
    # the n+1th residue has to be a normal residue. Since two graft
    # residues cannot be adjacent, it suffices to add n+1th residue to
    # that iteration.
    if nresthisiter != maxnummons:
        if res_list[chnum-1][nresthisiter-1] in graft_opt:
            nresthisiter += 1

    if iter_num == -1 or iter_num == 1:
        fin.write(';# Chain number: %d of %d chains\n' %(nch,chnum))
        fin.write(';# ----Begin main code -------\n')
        fin.write('\n')

    if iter_num != -1:
        fin.write(';# Iteration number: %d\n' %(iter_num))
        fin.write('set count %d' %(nresthisiter))
        fin.write('\n')


    fin.write(' resetpsf \n')
    fin.write(' segment %s {\n' %(segname))

    #Residues -- indices should have -1 for first dimension
    for rescnt in range(nresthisiter):
        fin.write('  residue  %d  %s\n' %(rescnt+1,\
                                          res_list[chnum-1][rescnt]))

    fin.write('}')        
    fin.write('\n')
    fin.write('\n')

    #Patches -- ch indices should have -1 for first dimension
    for patcnt in range(nresthisiter-1):
        resname1 = res_list[chnum-1][patcnt]
        resname2 = res_list[chnum-1][patcnt+1]
        patchname = patch_list[chnum-1][patcnt]

        # Normal Case: (see create_patches)
        if (resname1 not in graft_opt) and (resname2 not in graft_opt):
            fin.write('patch  %s  %s:%d  %s:%d\n' \
                      %(patchname,segname,patcnt+1,segname,patcnt+2))

        # Special Case 1: (see create_patches)
        elif resname1 in graft_opt:
            fin.write('patch  %s  %s:%d  %s:%d\n' \
                      %(patchname,segname,patcnt+1,segname,patcnt+2))
            
        # Special Case 2: (see create_patches)
        elif resname2 in graft_opt:

            # Case 2a: last RES is graft. Patch graft between
            # n and n+1
            if patcnt == nresthisiter-2: 
                fin.write('patch  %s  %s:%d  %s:%d\n' \
                          %(patchname,segname,patcnt+1,segname,patcnt+2))

            #Case 2b: patch normal between n and n+2
            else: 
                fin.write('patch  %s  %s:%d  %s:%d\n' \
                          %(patchname,segname,patcnt+1,segname,patcnt+3))
                    
        else: # Error
            print('Unknow res/patch sequence')
            print('ch#/patch#' , chnum, patcnt)
            print(res_list)
            print(patch_list)

    fin.write('\n')
#---------------------------------------------------------------------

# Run generic namd script
def run_namd(fin,execfyle,inpfyle,outfyle):
    fin.write(';# Run NAMD\n')
    fin.write('%s  %s  > %s\n' %(execfyle,inpfyle,outfyle))        
    fin.write(';# exit \n')
    fin.write(';# -------------------------------------\n')
    fin.write('\n')
#---------------------------------------------------------------------

def initiate_packmol(fpin,inptype,chains,tolval):
    fpin.write('# PACKMOL melt input for %s\n' %(inptype))
    fpin.write('# Contains num chains: %d with tolerance of %g Ang\n'\
               %(chains, tolval))
    fpin.write('\n')
    fpin.write('tolerance %g\n' %(tolval))
    fpin.write('\n')
    fpin.write('# Input filetype\n')
    fpin.write('filetype pdb\n')
    outname = 'melt_' + inptype + '_nch_' + str(chains) + '.pdb'
    fpin.write('# Output filename\n')
    fpin.write('output %s\n' %(outname))
    fpin.write('\n')
    fpin.write('# Adding chains\n')
#---------------------------------------------------------------------

# Make packmol input scripts
def make_packmol(fpin,structname,nrepeats,trans_list):
    fpin.write('structure %s\n' %(structname+'.pdb'))
    fpin.write('\t number %d\n' %(nrepeats))
    if trans_list != []:
        fpin.write('\t fixed')
        for k in range(6):
            fpin.write('\t %s' %(trans_list[k]))
        fpin.write('\n')
    fpin.write('end structure')
#---------------------------------------------------------------------

